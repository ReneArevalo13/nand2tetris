// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	//// Replace this comment with your code.

    // Input instruction fan out
    Mux16(a=false,       
    b=instruction, 
    sel=instruction[15],
    out[0]=cJGT,
    out[1]=cJEQ,
    out[2]=cJLT,
    out[3]=cDestM,
    out[3]=writeM,
    out[4]=cDestD,
    out[5]=cDestA,
    out[6]=cAluNo,
    out[7]=cAluF,
    out[8]=cAluNy,
    out[9]=cAluZy,
    out[10]=cAluNx,
    out[11]=cAluZx,
    out[12]=cAorM,
    out[15]=cType
     );

    // ALU
    ALU(x=AluXin,
    y=AluYin,
    zx=cAluZx,
    nx=cAluNx,
    zy=cAluZy,
    ny=cAluNy,
    f=cAluF,
    no=cAluNo,
    out=aluOut, out=outM,
    zr=zerop,
    ng=negp);

    // ALU outputs to be used in jump logic
    // (!ng && !zr) -> positive 
    Or(a=zerop, b=negp, out=lteq);
    Not(in=lteq, out=posp);

    // A Register logic
    Mux16(a=instruction, b=aluOut, sel=cType, out=aMuxOut);
    Mux16(a=aRegout, b=inM, sel=cAorM, out=AluYin);
    Not(in=cType, out=notCType);
    Or(a=notCType, b=cDestA, out=loadA);
    ARegister(in=aMuxOut ,load=loadA ,out=aRegout, out[0..14]=addressM);

    // D Register
    DRegister(in=aluOut ,load=cDestD ,out=AluXin);

    // JUMP logic
    And(a=cJEQ, b=zerop, out=jeq);
    And(a=cJLT, b=negp, out=jlt);
    And(a=cJGT, b=posp, out=jgt);
    Or(a=jeq, b=jlt, out=jle);
    Or(a=jle, b= jgt, out=jump);
    PC(in=aRegout, load=jump, inc=true, reset=reset, out[0..14]=pc, out[15]=false);   // program counter
}